/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/* Break Points
    Provide either a variable size or specific width to set a 
    max/min break point.
    Usage: @include bp-min(width);
 */
@mixin bp-min($point) {
    @if $point == s {
        @media screen and (min-width: $bp-s) { @content; }
    }
    
    @else if $point == m {
        @media screen and (min-width: $bp-m) { @content; }
    }
    
    @else if $point == l {
        @media screen and (min-width: $bp-l) { @content; }
    }
    
    @else if $point == xl {
        @media screen and (min-width: $bp-xl) { @content; }
    }
    
    @else if $point == xxl {
        @media screen and (min-width: $bp-xxl) { @content; }
    }
    
    @else {
        @media screen and (min-width: $point) { @content; }
    }
}

@mixin bp-max($point) {
    @if $point == s {
        @media screen and (max-width: $bp-s - 1px) { @content; }
    }
    
    @else if $point == m {
        @media screen and (max-width: $bp-m - 1px) { @content; }
    }
    
    @else if $point == l {
        @media screen and (max-width: $bp-l - 1px) { @content; }
    }
    
    @else if $point == xl {
        @media screen and (max-width: $bp-xl - 1px) { @content; }
    }
    
    @else if $point == xxl {
        @media screen and (max-width: $bp-xxl - 1px) { @content; }
    }
    
    @else {
        @media screen and (max-width: $point) { @content; }
    }
}


/*
    Arrows
*/
@mixin triangle($dir, $color) {
    @if $dir == down {
        border-bottom: none;
        border-left: .866em solid transparent;
        border-right: .866em solid transparent;
        border-top: 1em solid $color;
    }
    
    @if $dir == left {
        border-bottom: .866em solid transparent;
        border-left: none;
        border-right: 1em solid $color;
        border-top: .866em solid transparent;
    }
    
    @if $dir == right {
        border-bottom: .866em solid transparent;
        border-left: 1em solid $color;
        border-right: none;
        border-top: .866em solid transparent;
    }
    
    @if $dir == up {
        border-bottom: 1em solid $color;
        border-left: .866em solid transparent;
        border-right: .866em solid transparent;
        border-top: none;
    }
    
    content: "";
    position: absolute;
}

/*
    Flexbox
*/
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}






/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/* CSS Transition
	Usage: @include transition(width,0.3s,ease-out);
 */
@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback  
	Usage: @include font-size(1, large);
*/
@mixin font-size( $decimal-size, $keyword: null ) {
  $base-font-multiplier: 1;
  @if $keyword{ font-size: $keyword; }
  @else { font-size: $decimal-size * $base-font-multiplier * 16px;}
  font-size: $decimal-size * 1rem;
}
